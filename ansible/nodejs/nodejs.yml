- hosts: localhost
  #strategy: debug
  vars:
    ansible_user: "ec2-user"
    #ansible_ssh_private_key_file: "~/.ssh/id_rsa"
    com: trak
    env: test
    app: front
    project: trak
    domain: trakapptest.es
    path: var
    pathlog: /var/log/trak
    KEY_PATH: /home/ec2-user/.ssh/ssh-key-github
    GIT_AUTH_USER: icasadosar
    GIT_AUTH_PASS: "{{ lookup('env','GIT_AUTH_PASS') }}"
    GIT_DOMAIN: github.com
    GIT_USER: traksl
    GIT_REPO: trakFront # icasadosar
    GIT_BRANCH: "{{ lookup('env','GIT_BRANCH') }}"
  become: yes
  tasks:

  - name: install package repo epel form amazon linux 2
    shell: "amazon-linux-extras install epel -y"

  - name: yum update
    yum:
      name: '*'
      state: latest
      update_cache: yes
      update_only: yes
    register: yum_update_status

  - name: install compiler
    yum:
      name:
        - gcc-c++
        - make
      state: present

  - name: install node from repo
    shell: "curl -fsSL https://rpm.nodesource.com/setup_16.x | bash -"
     
  - name: install nodejs
    yum:
      name: nodejs
      state: present

  - name: create log directory
    file:
      path: /var/log/nginx/{{ domain }}/{{ app }}
      state: directory
      mode: '0775'

  - name: create error-log file
    file:
      path: /var/log/nginx/{{ domain }}/{{ app }}/error-{{ app }}.{{ domain }}-http-80.log
      state: touch
      mode: u=rw,g=r,o=r

  - name: create access-log file
    file:
      path: /var/log/nginx/{{ domain }}/{{ app }}/access-{{ app }}.{{ domain }}-http-80.log
      state: touch
      mode: u=rw,g=r,o=r      

#  - name: install nodejs
#    yum:
#      name: ['nodejs']
#      skip_broken: yes
#      state: present

#  - name: install npm
#    yum:
#      name: ['npm']
#      skip_broken: yes
#      state: present

#  - name: Add SSH key to SSH agent
#    shell: |
#      eval $(ssh-agent -s)
#      ssh-add {{ KEY_PATH }}
#      #git clone "{{ urlgit }}/{{ app }}" "/{{ path }}/{{ project }}/{{ app }}/."
#      export pid=`ps -A | grep ssh-agent | awk 'NR==1{print $1}' | cut -d' ' -f1`; kill $pid

#    become: no

#  - name: Switch branch 
#    shell: "{{ GIT_EXECUTABLE }} checkout {{ GIT_BRANCH }}"
#    args:
#      chdir: "{{ CLONE_DEST }}"

#  - name: Clone the repository
#    shell: GIT_SSH_COMMAND="ssh -i {{ KEY_PATH }} -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" {{ GIT_EXECUTABLE }} clone {{ GIT_REPO }} {{ CLONE_DEST }}
  
#  - name: Switch branch 
#    shell: "{{ GIT_EXECUTABLE }} checkout {{ GIT_BRANCH }}"
#    args:
#      chdir: "{{ CLONE_DEST }}"



#  - name: Clone the repository
#    shell: GIT_SSH_COMMAND="ssh -i {{ KEY_PATH }} -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" {{ GIT_EXECUTABLE }} clone {{ GIT_REPO }} {{ CLONE_DEST }}
  
#  - name: Switch branch 
#    shell: "{{ GIT_EXECUTABLE }} checkout {{ GIT_BRANCH }}"
#    args:
#      chdir: "{{ CLONE_DEST }}"

  - name: git-clone repo
    git:
      repo: "https://{{ GIT_AUTH_USER }}:{{ GIT_AUTH_PASS|urlencode() }}@{{ GIT_DOMAIN }}/{{ GIT_USER }}/{{ GIT_REPO }}"
      dest: "/{{ path }}/{{ project }}/{{ app }}/"
      #single_branch: yes
      version: "{{ GIT_BRANCH }}"
      #accept_hostkey: yes
      
  - name: install nodejs packages on packages.json
    npm:
      path: "/{{ path }}/{{ project }}/{{ app }}"
      state: present
    #notify: restart nodejs

  - name: copy nginx site-{{ app }}
    template:
        src: site-{{ app }}-http-80.conf
        dest: /etc/nginx/conf.d/{{ app }}.{{ domain }}-http-80.conf
        owner: root
        group: root
        mode: '0644'
    notify: restart nginx

  - name: install supervisord
    yum:
      name: supervisor
      state: present

  - name: copy supervisord supervisord-npm.ini
    template:
        src: supervisord-npm.ini
        dest: /etc/supervisord.d/npm.ini
        owner: root
        group: root
        mode: '0644'
    #notify: restart supervisord

  - name: create directory log {{ pathlog }}
    file:
       path: "{{ pathlog }}"
       state: directory
       mode: '0775'
       owner: "{{ ansible_user }}"
       group: "{{ ansible_user }}"

  - name: create directory opt /opt/trak
    file:
       path: /opt/trak
       state: directory
       mode: '0775'
       owner: "{{ ansible_user }}"
       group: "{{ ansible_user }}"

  - name: copy startup script to /opt directory
    template:
        src: doStartupNodejs.sh
        dest: /opt/trak/doStartupNodejs.sh
        mode: 0755
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

  - name: run startup script
    shell: /opt/trak/doStartupNodejs.sh > {{ pathlog }}/doStartupNodejs.log 2> {{ pathlog }}/doStartupNodejs.err.log & sleep 1
    args:
      chdir: /{{ path }}/{{ project }}/{{ app }}
    #async: 45
    #poll: 0

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted
        enabled: yes

#    - name: restart supervisord
#      service: 
#        name: supervisord
#        state: restart

#    - name: restart nodejs
      #command: cd /{{ path }}/{{ project }}/{{ app }} && nohup npm restart --prefix /{{ path }}/{{ project }}/{{ app }} > stdout.txt 2> stderr.txt &
#      command: npm restart &
      #command: /usr/bin/forever start /{{ path }}/{{ project }}/{{ app }}/src/sw-build.js
      # /tmp/apptest/front/node_modules/react-scripts/scripts/start.js
      #shell: /bin/bash doNodejs.sh start &
#      args:
#        chdir: /{{ path }}/{{ project }}/{{ app }}